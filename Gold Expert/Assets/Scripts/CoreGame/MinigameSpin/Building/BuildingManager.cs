using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using UnityEngine;
using Sirenix.OdinInspector;
using UnityEngine.Serialization;

public class BuildingManager : Singleton<BuildingManager>,IModalUI
{
   [Header("UI References")]
    [SerializeField] private GameObject objBuildingUI;

    [Header("Map & Player Progress")]
    public JsonMapDatabase mapDatabase;
    private PlayerMapProgress playerProgress;

    #region Initialization

    private void Start()
    {
        mapDatabase = LoadMapConfig();

     
    }
    public void Load(){
      //  string json = PlayerPrefs.GetString("BuildingStates", "");
      if (PlayFabManager.Instance.DataDictionary.ContainsKey("CurrentBuildingData"))
        {
            string json =PlayFabManager.Instance.GetData("CurrentBuildingData");
            LoadProgress(json);
            Debug.Log("‚úÖ Load th√†nh c√¥ng: " + json);
        }
     
    }
    private JsonMapDatabase LoadMapConfig()
    {
        TextAsset jsonAsset = Resources.Load<TextAsset>("Json/Map");
        if (jsonAsset == null)
        {
            Debug.LogError("‚ùå Kh√¥ng t√¨m th·∫•y file Map.json trong Resources/Json/");
            return null;
        }

        return JsonUtility.FromJson<JsonMapDatabase>(jsonAsset.text);
    }

    #endregion

    #region Building Logic

    [Button]
    public bool UpgradeBuilding(string buildingName)
    {
        var currentMap = GetCurrentMap();
        var buildingCfg = currentMap.buildings.FirstOrDefault(b => b.name == buildingName);

        if (buildingCfg == null)
        {
            Debug.LogError($"‚ùå Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh c√¥ng tr√¨nh {buildingName}");
            return false;
        }

        if (!playerProgress.buildings.TryGetValue(buildingName, out var state))
        {
            Debug.LogError($"‚ùå Kh√¥ng t√¨m th·∫•y tr·∫°ng th√°i c√¥ng tr√¨nh {buildingName}");
            return false;
        }

        if (state.needRepair)
        {
            Debug.LogWarning($"üîß {buildingName} c·∫ßn s·ª≠a ch·ªØa tr∆∞·ªõc khi n√¢ng c·∫•p.");
            return false;
        }

        if (state.level >= buildingCfg.maxLevel)
        {
            Debug.Log($"‚úÖ {buildingName} ƒë√£ ƒë·∫°t c·∫•p t·ªëi ƒëa.");
            return false;
        }

        state.level++;
        Debug.Log($"‚¨ÜÔ∏è ƒê√£ n√¢ng {buildingName} l√™n c·∫•p {state.level}");

        if (IsCurrentMapCompleted())
        {
            Debug.Log("üéâ ƒê√£ ho√†n th√†nh map hi·ªán t·∫°i, chuy·ªÉn sang map k·∫ø ti·∫øp.");
            SwitchToNextMap();
        }

        SaveProgress();
        return true;
    }

    private bool IsCurrentMapCompleted()
    {
        var currentMap = GetCurrentMap();

        return currentMap.buildings.All(building =>
            playerProgress.buildings.TryGetValue(building.name, out var state)
            && state.level >= building.maxLevel
        );
    }

    #endregion

    #region Map Handling

    private MapData GetCurrentMap()
    {
        return mapDatabase.maps.FirstOrDefault(m => m.mapId == playerProgress.currentMapId);
    }

    private void SwitchToNextMap()
    {
        int currentIndex = mapDatabase.maps.FindIndex(m => m.mapId == playerProgress.currentMapId);
        if (currentIndex + 1 >= mapDatabase.maps.Count)
        {
            Debug.Log("üèÅ Kh√¥ng c√≤n map n√†o ti·∫øp theo.");
            return;
        }

        var nextMap = mapDatabase.maps[currentIndex + 1];
        playerProgress.currentMapId = nextMap.mapId;

        // Reset tr·∫°ng th√°i c√¥ng tr√¨nh
        playerProgress.buildings.Clear();
        foreach (var b in nextMap.buildings)
        {
            playerProgress.buildings[b.name] = new BuildingState { level = 0, needRepair = false };
        }

        Debug.Log($"üåç ƒê√£ chuy·ªÉn sang map: {nextMap.mapId}");
    }

    #endregion

    #region Persistence

    public void LoadProgress(string json)
    {
        if (!string.IsNullOrEmpty(json))
        {
            playerProgress = JsonConvert.DeserializeObject<PlayerMapProgress>(json);
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu BuildingStates trong PlayerPrefs.");
        }
    }

    [Button]
    private void SaveProgress()
    {
        var json = JsonConvert.SerializeObject(playerProgress);
        PlayerPrefs.SetString("BuildingStates", json);
        PlayerPrefs.Save();
        Debug.Log($"üíæ ƒê√£ l∆∞u ti·∫øn tr√¨nh: {json}");
        // TODO: G·ªçi PlayFab API n·∫øu c·∫ßn ƒë·ªìng b·ªô l√™n cloud
        PlayFabManager.Instance.SaveSingleData(PlayerDataKey.CurrentBuildingData.ToString(), json);
    }

    #endregion

    #region UI Control

    public void Show()
    {
        objBuildingUI.SetActive(true);
    }

    public void Hide()
    {
        objBuildingUI.SetActive(false);
    }

    public bool IsVisible()
    {
        return objBuildingUI.activeSelf;
    }

    public void SwitchToSpinGame()
    {
        Hide();
        SlotMachine.Instance.Show();
    }

    #endregion
}
